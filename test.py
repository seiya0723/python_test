# メリット: 変数を使うことで値の書き換えが1箇所で済む

# 生徒のテストの点数が3つある。このテストの点数の合計と平均点を出力するには？

# Aは70点、Bは80点、Cは60点

print(70 + 96 + 60)
print((70 + 96 + 60)/3)

# Bの点数に誤りがあった。Bは96点
# 変数を使って、値を格納(代入)する

# 変数名 = 値 で値を変数名に代入できる。
a = 70
b = 96
c = 60

print(a + b + c)
print((a + b + c)/3)

# このように変数を使用することで、値の書き換えが簡単に済む。

# 商品の価格(1000円)に消費税(1.1)を掛け算して、代金を出力するには？
print(1000*1.1)

# 価格と消費税を変数に代入する
# 変数名は自由に名付けることができる
# a = 1000 

# 変数名を見ただけでは、価格が入っているのかわからない。
# 変数名は、代入される値に応じて、関連する名前にしたほうが良い。ローマ字ではなく、英語で。
price = 1000
tax = 1.1

# 変数名に意味を持たせることで、どんな処理が行われているのか、想像できる。
# 消費税込みの価格の表示をしていることがわかる。
print(price * tax)

# 変数を作る際に注意しなければならないこと。
# Pythonの予約語(Python内で用意されている関数や処理)は使用してはならない。
# print文は予約語に当たる。 print以外には、for if while list dict int ...などが有る。

# もともと、printには値を出力する処理が備わっている。にも関わらず1000を代入すると、処理が1000で上書きされてしまう。
#print = 1000
#print(print)

# 変数は値をもう一度代入して、値を上書きできる。
tax = 1.08
print(price * tax) # 1000 * 1.08

# 変数の演算結果を、別の変数に代入することもできる。
total = price * tax

print(total)

# totalの末尾に"円"を連結して、 1080.0円と表示させる。
print(str(total) + "円")

# f文字列を使って、↑を表現する
print(f"{total}円")






# 変数名 = 値 で値を変数名に代入できる。
# abcdefの点数
"""
a = 70
b = 96
c = 60
d = 60
...

print(a + b + c)
print((a + b + c)/3)
"""
# 一つの変数に、複数の値を含ませる 配列を使う。
# [] でカンマ区切りにしたデータ型のことを、リスト型という。
scores = [70,96,60,60,70,90,60,70,100]
print(scores)
# リスト型の中の値を取り出すには？ 1番最初の70を取り出すには？ 0から始まるインデックス番号を指定する
print(scores[0])
print(scores[1])
print(scores[2])
print(scores[3])
print(scores[5])
# リストの値を取り出す時、番号を超過してしまうとエラー
#print(scores[6])

# 合計点を出力するには？
#print(scores[0] + scores[1] .....) ではなく
# sum関数を使う。
print(sum(scores))
# sum関数とlen関数もある。len関数で値の数を数える。
print(sum(scores)/len(scores))


# 辞書型 { "キー":"値","キー":"値"....}
scores = { "A":70,"B":96,"C":60,"D":60,"E":70,"F":90,"G":60,"H":70,"I":100 }

# キー名を指定して呼び出す。
print(scores["A"])

# 辞書型からキーだけ取り出す。リスト型(辞書型のオブジェクト) で得られる。.
print( scores.keys() ) 
# 辞書型から値だけ取り出す。
print( sum( scores.values() )  ) 